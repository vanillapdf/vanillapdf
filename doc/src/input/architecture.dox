/*!
\page page_architecture Architecture
\tableofcontents

\section lib_interface Library interface

The library is writted in standard C++ (currently 14) and can be compiled using
Visual studio (2015 and 2017) and GCC (tested on Ubuntu 16.04) as well.

It provides only <b>ANSI C</b> API. The reason is rooted within the incompatibility of the C++ ABI between compilers.<br>
Functions across the interface use standard C caller clean-up [<b>cdecl</b>](https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl) calling convention.<br>

\section exceptions Exceptions

Library uses C++ exceptions internally.<br>
Each interface function is wrapped inside try-catch block to prevent any exceptions to escape and potentially crash the application.<br>
All exceptions thrown in this way are caught and their message is stored in a thread-local buffer.<br>
This buffer is separate for each thread and has a pre-allocated size in case of memory shortage.<br>

\section object_ownership Object ownership

All handles are basically opaque pointers to internal structures.<br>
Library uses so-called intrusive pointer reference counting mechanism.<br>
Usually, the structure and the reference counter are two separate objects.<br>
In this case, the reference counter is embedded inside the structure body.<br>

\todo image_here

\section file_layer File layer

File layer allows access to file contents at the syntactic level.<br>
It has some necessary semantic features that are required for parsing its syntax.<br>

\note
For example \ref IndirectObjectReferenceHandle often has to be resolved to read an object.<br>
The \ref StreamObjectHandle has it's \p Length often stored as an indirect object.<br>
In order to validate this object, the \p Length has to be resolved to successfully parse an object.<br>

\subsection arch_streams IO Streams

Library uses C++ io streams for reading source files and writing output files.<br>
There are already interfaces, that represents these streams and will be used throughout the library interface.<br>

<ul>
<li>Source files with \ref InputStreamInterfaceHandle
<li>Destinatiuon files with \ref OutputStreamInterfaceHandle
</ul>

\note
These interfaces could be overwritten in the future, so that user can provide custom implementation for reading source file.<br>
This is often helpful for interacting with other applications, that might need to share file access.<br>

\subsection arch_parsing Parsing

Tokens are smallest syntactic elements and are separated by a whitespace or a delimiter.<br>
Which characters are considered whitespace and which are considered delimiter is discussed in [<b>section 7.2 - Lexical Conventions</b>](PDF32000_2008.pdf#G6.1638740).<br>

Tokenizer uses look-ahead to determine proper token type, since some of the tokens are ambiguous from the first character.<br>
For example hexadecimal string is enclosed with angle brackets "<", ">" and the dictionary "<<", ">>".<br>

Tokens are passed to the parser, who is responsible for constructing objects.<br>
Parser uses look-ahead as well, since multiple tokens may form a single object.<br>

\section function_callbacks Function callbacks

Library provides multiple interfaces, that could be overriden by the calling application.

For instance, when signing a document, it is possible to use classic PKCS#12 (Personal Information Exchange described in [<b>RFC 7292</b>](https://tools.ietf.org/html/rfc7292).<br>
Unfortunately, this would not work with smart cards, where the private key is not directly accessible.<br>
User can override \ref SigningKeyHandle and provide signing implementation outside library boundaries.<br>

More extendable interfaces:
<ul>
<li>Document signing with \ref SigningKeyHandle
<li>Document encryption with \ref EncryptionKeyHandle
</ul>

\section arch_deps Dependencies

Library has three dependent libraries:
<ul>
<li>OpenSSL (<https://www.openssl.org/>) - used for encrypted files
<li>zlib (<http://www.zlib.net/>) - used for flate compression method
<li>libjpeg (<http://libjpeg.sourceforge.net/>) - used for compressed JPEG images
</ul>

*/