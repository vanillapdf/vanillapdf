#include "unittest.h"

#include <cstring>
#include <gtest/gtest.h>

namespace filters {

	TEST(FlateDecodeFilter, EncodeDecodeCheck) {

		const unsigned char INPUT_DATA[] = {
			0xA8, 0x85, 0x80, 0xBD, 0xCC, 0x45, 0x90, 0xC8, 0x64, 0x22,
			0xA1, 0x5D, 0xCF, 0x66, 0xFD, 0x7B, 0xBE, 0x45, 0xAA, 0x95,
			0x29, 0xCA, 0xF7, 0x8D, 0xC3, 0x3A, 0xC1, 0xC7, 0x84, 0x3A,
			0x87, 0xD9, 0x24, 0xB2, 0xD1, 0x23, 0x85, 0xC3, 0x35, 0x83,
			0xEE, 0xD9, 0xDA, 0xED, 0x34, 0x62, 0xE1, 0x80, 0x3E, 0x38,
			0x52, 0xAE, 0x6F, 0xBC, 0xD3, 0xF5, 0x76, 0x92, 0x13, 0xA1,
			0x77, 0xD8, 0x82, 0x4B, 0xCB, 0x5A, 0x70, 0xD7, 0x41, 0xB7,
			0x56, 0x14, 0xEB, 0x0D, 0x78, 0x72, 0x01, 0x8F, 0x97, 0x77,
			0xDA, 0x17, 0x99, 0x9C, 0xB5, 0x28, 0x25, 0x6E, 0x14, 0xC4,
			0x99, 0xD5, 0xE8, 0x11, 0x5C, 0x1D, 0x22, 0x63, 0x66, 0x65
		};

		BufferHandle* input_data_buffer = nullptr;
		BufferHandle* encoded_data_buffer = nullptr;
		BufferHandle* decoded_data_buffer = nullptr;
		FlateDecodeFilterHandle* filter_handle = nullptr;

		string_type decoded_data = nullptr;
		size_type decoded_data_len = 0;

		ASSERT_EQ(FlateDecodeFilter_Create(&filter_handle), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(filter_handle, nullptr);

		ASSERT_EQ(Buffer_CreateFromData(&input_data_buffer, reinterpret_cast<string_type>(INPUT_DATA), sizeof(INPUT_DATA)), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(input_data_buffer, nullptr);

		ASSERT_EQ(FlateDecodeFilter_Encode(filter_handle, input_data_buffer, &encoded_data_buffer), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(encoded_data_buffer, nullptr);

		ASSERT_EQ(FlateDecodeFilter_Decode(filter_handle, encoded_data_buffer, &decoded_data_buffer), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(decoded_data_buffer, nullptr);

		ASSERT_EQ(Buffer_GetData(decoded_data_buffer, &decoded_data, &decoded_data_len), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(decoded_data, nullptr);

		ASSERT_EQ(decoded_data_len, sizeof(INPUT_DATA));
		ASSERT_EQ(std::memcmp(decoded_data, INPUT_DATA, decoded_data_len), 0);

		// Cleanup

		ASSERT_EQ(Buffer_Release(decoded_data_buffer), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_EQ(Buffer_Release(encoded_data_buffer), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_EQ(Buffer_Release(input_data_buffer), VANILLAPDF_ERROR_SUCCESS);

		ASSERT_EQ(FlateDecodeFilter_Release(filter_handle), VANILLAPDF_ERROR_SUCCESS);
	}

	TEST(DCTDecodeFilter, Decode) {

		const unsigned char INPUT_DATA[] = {
			0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
			0x00, 0x01, 0x00, 0x00, 0xFF, 0xE2, 0x01, 0xD8, 0x49, 0x43, 0x43, 0x5F, 0x50, 0x52, 0x4F, 0x46,
			0x49, 0x4C, 0x45, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x04, 0x30,
			0x00, 0x00, 0x6D, 0x6E, 0x74, 0x72, 0x52, 0x47, 0x42, 0x20, 0x58, 0x59, 0x5A, 0x20, 0x07, 0xE0,
			0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x63, 0x73, 0x70, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xF6, 0xD6, 0x00, 0x01,
			0x00, 0x00, 0x00, 0x00, 0xD3, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x64, 0x65, 0x73, 0x63, 0x00, 0x00,
			0x00, 0xF0, 0x00, 0x00, 0x00, 0x24, 0x72, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x01, 0x14, 0x00, 0x00,
			0x00, 0x14, 0x67, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x01, 0x28, 0x00, 0x00, 0x00, 0x14, 0x62, 0x58,
			0x59, 0x5A, 0x00, 0x00, 0x01, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x77, 0x74, 0x70, 0x74, 0x00, 0x00,
			0x01, 0x50, 0x00, 0x00, 0x00, 0x14, 0x72, 0x54, 0x52, 0x43, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00,
			0x00, 0x28, 0x67, 0x54, 0x52, 0x43, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00, 0x00, 0x28, 0x62, 0x54,
			0x52, 0x43, 0x00, 0x00, 0x01, 0x64, 0x00, 0x00, 0x00, 0x28, 0x63, 0x70, 0x72, 0x74, 0x00, 0x00,
			0x01, 0x8C, 0x00, 0x00, 0x00, 0x3C, 0x6D, 0x6C, 0x75, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x65, 0x6E, 0x55, 0x53, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
			0x00, 0x1C, 0x00, 0x73, 0x00, 0x52, 0x00, 0x47, 0x00, 0x42, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x6F, 0xA2, 0x00, 0x00, 0x38, 0xF5, 0x00, 0x00, 0x03, 0x90, 0x58, 0x59,
			0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x99, 0x00, 0x00, 0xB7, 0x85, 0x00, 0x00,
			0x18, 0xDA, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xA0, 0x00, 0x00,
			0x0F, 0x84, 0x00, 0x00, 0xB6, 0xCF, 0x58, 0x59, 0x5A, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF6, 0xD6, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x2D, 0x70, 0x61, 0x72, 0x61, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x66, 0x66, 0x00, 0x00, 0xF2, 0xA7, 0x00, 0x00,
			0x0D, 0x59, 0x00, 0x00, 0x13, 0xD0, 0x00, 0x00, 0x0A, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x6D, 0x6C, 0x75, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x0C, 0x65, 0x6E, 0x55, 0x53, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x47,
			0x00, 0x6F, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x49, 0x00, 0x6E,
			0x00, 0x63, 0x00, 0x2E, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x36, 0xFF, 0xDB,
			0x00, 0x43, 0x00, 0x85, 0x5C, 0x64, 0x75, 0x64, 0x53, 0x85, 0x75, 0x6C, 0x75, 0x96, 0x8E, 0x85,
			0x9E, 0xC8, 0xFF, 0xD9, 0xC8, 0xB7, 0xB7, 0xC8, 0xFF, 0xFF, 0xFF, 0xF2, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x8E, 0x96, 0x96, 0xC8, 0xAF, 0xC8, 0xFF, 0xD9,
			0xD9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x5C, 0x00,
			0x90, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x18, 0x00,
			0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x01, 0x02, 0x03, 0x04, 0xFF, 0xC4, 0x00, 0x1D, 0x10, 0x01, 0x01, 0x01, 0x01, 0x00, 0x02,
			0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x11, 0x21, 0x31,
			0x03, 0x12, 0x41, 0x51, 0xFF, 0xC4, 0x00, 0x16, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xFF, 0xC4, 0x00, 0x17,
			0x11, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x11, 0x01, 0x21, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11,
			0x00, 0x3F, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD, 0xD7, 0x16, 0x79,
			0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x05, 0x67, 0x55, 0x2E, 0x99,
			0xB5, 0x9D, 0xD5, 0xCC, 0x4A, 0xDE, 0x2F, 0xE3, 0x06, 0x6F, 0x94, 0xC6, 0xA3, 0xB0, 0x8A, 0xDB,
			0x00, 0x00, 0x00, 0x00, 0x31, 0x6D, 0x4A, 0x34, 0x76, 0x30, 0x25, 0x58, 0xD7, 0xDA, 0x2F, 0xDA,
			0x39, 0x05, 0x58, 0xEB, 0xD6, 0x77, 0x5C, 0xFB, 0x53, 0xA5, 0x22, 0xDA, 0x8B, 0x22, 0xB2, 0xAC,
			0xF0, 0xE3, 0x47, 0x54, 0x4E, 0xD6, 0xA6, 0xEC, 0x42, 0x94, 0x6E, 0x6E, 0x34, 0xE3, 0x23, 0x52,
			0xD8, 0xB5, 0x23, 0xA8, 0xCE, 0x75, 0xD6, 0x9A, 0x64, 0x45, 0x01, 0x9B, 0x94, 0xB3, 0x8D, 0xA2,
			0x45, 0xAE, 0x75, 0x1A, 0xBE, 0xD9, 0x65, 0x70, 0xE7, 0x6A, 0x59, 0x63, 0xA6, 0x67, 0x27, 0x53,
			0x5E, 0x69, 0x0A, 0xC4, 0xAA, 0x9C, 0x5B, 0x9B, 0x05, 0x04, 0xF2, 0x75, 0x15, 0x49, 0xED, 0x3A,
			0x08, 0xD5, 0x65, 0x66, 0x6D, 0x6F, 0x38, 0xFE, 0xAC, 0x2A, 0x7C, 0x73, 0xF5, 0xD1, 0x15, 0xB6,
			0x00, 0x00, 0x04, 0x06, 0x2F, 0xB2, 0x4E, 0xD3, 0xDD, 0x6E, 0x4E, 0x33, 0x98, 0xA2, 0x5C, 0xB4,
			0x35, 0x11, 0xCE, 0x4F, 0x2D, 0x9C, 0x54, 0xCC, 0x5D, 0x73, 0xDB, 0x16, 0x3A, 0x69, 0x86, 0x75,
			0xAC, 0x6B, 0x19, 0xEC, 0xF2, 0xBB, 0x93, 0x8D, 0x66, 0x72, 0x16, 0x75, 0xA9, 0xC6, 0x6F, 0x53,
			0x3E, 0x9A, 0x49, 0x38, 0xAA, 0x80, 0x00, 0x00, 0x02, 0x5F, 0x4A, 0x03, 0x32, 0x71, 0xA0, 0x00,
			0x00, 0x00, 0x06, 0x74, 0x99, 0xCF, 0xEB, 0x4A, 0x91, 0x68, 0x02, 0xA0, 0x00, 0x00, 0x03, 0xFF,
			0xD9
		};

		BufferHandle* input_data_buffer = nullptr;
		BufferHandle* decoded_data_buffer = nullptr;
		DCTDecodeFilterHandle* filter_handle = nullptr;

		ASSERT_EQ(DCTDecodeFilter_Create(&filter_handle), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(filter_handle, nullptr);

		ASSERT_EQ(Buffer_CreateFromData(&input_data_buffer, reinterpret_cast<string_type>(INPUT_DATA), sizeof(INPUT_DATA)), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(input_data_buffer, nullptr);

		ASSERT_EQ(DCTDecodeFilter_Decode(filter_handle, input_data_buffer, &decoded_data_buffer), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(decoded_data_buffer, nullptr);

		// Cleanup

		ASSERT_EQ(Buffer_Release(decoded_data_buffer), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_EQ(Buffer_Release(input_data_buffer), VANILLAPDF_ERROR_SUCCESS);

		ASSERT_EQ(DCTDecodeFilter_Release(filter_handle), VANILLAPDF_ERROR_SUCCESS);
	}

	TEST(JPXDecodeFilter, Decode) {

		const unsigned char INPUT_DATA[] = {
			0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A, 0x00, 0x00, 0x00, 0x14,
			0x66, 0x74, 0x79, 0x70, 0x6A, 0x70, 0x32, 0x20, 0x00, 0x00, 0x00, 0x00, 0x6A, 0x70, 0x32, 0x20,
			0x00, 0x00, 0x00, 0x2D, 0x6A, 0x70, 0x32, 0x68, 0x00, 0x00, 0x00, 0x16, 0x69, 0x68, 0x64, 0x72,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x0F, 0x63, 0x6F, 0x6C, 0x72, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x6A, 0x70, 0x32, 0x63, 0xFF, 0x4F, 0xFF, 0x51, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07,
			0x01, 0x01, 0x07, 0x01, 0x01, 0x07, 0x01, 0x01, 0xFF, 0x5C, 0x00, 0x0D, 0x40, 0x40, 0x48, 0x48,
			0x50, 0x48, 0x48, 0x50, 0x48, 0x48, 0x50, 0xFF, 0x52, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x01,
			0x03, 0x04, 0x04, 0x00, 0x01, 0xFF, 0x64, 0x00, 0x0E, 0x00, 0x01, 0x4C, 0x54, 0x5F, 0x4A, 0x50,
			0x32, 0x5F, 0x32, 0x32, 0x30, 0xFF, 0x90, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x00,
			0x01, 0xFF, 0x93, 0xDF, 0x80, 0x08, 0x07, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
			0x80, 0x80, 0xFF, 0xD9
		};

		BufferHandle* input_data_buffer = nullptr;
		BufferHandle* decoded_data_buffer = nullptr;
		JPXDecodeFilterHandle* filter_handle = nullptr;

		ASSERT_EQ(JPXDecodeFilter_Create(&filter_handle), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(filter_handle, nullptr);

		ASSERT_EQ(Buffer_CreateFromData(&input_data_buffer, reinterpret_cast<string_type>(INPUT_DATA), sizeof(INPUT_DATA)), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(input_data_buffer, nullptr);

		ASSERT_EQ(JPXDecodeFilter_Decode(filter_handle, input_data_buffer, &decoded_data_buffer), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_NE(decoded_data_buffer, nullptr);

		// Cleanup

		ASSERT_EQ(Buffer_Release(decoded_data_buffer), VANILLAPDF_ERROR_SUCCESS);
		ASSERT_EQ(Buffer_Release(input_data_buffer), VANILLAPDF_ERROR_SUCCESS);

		ASSERT_EQ(JPXDecodeFilter_Release(filter_handle), VANILLAPDF_ERROR_SUCCESS);
	}

}
