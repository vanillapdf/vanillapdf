stages:
  - test
  - deploy-staging
  - deploy-production

windows-ltsc2022-x86:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-windows-x86:ltsc2022
  when: manual
  tags:
    - windows
    - private # Shared windows runners are broke and broken

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -G "Visual Studio 17 2022" -DCMAKE_GENERATOR_PLATFORM=Win32 -DPLATFORM_IDENTIFIER=win-x86
    - cmake --build . --config Release --target ALL_BUILD
    - cmake --build . --config Release --target RUN_TESTS
    - cmake --build . --config Release --target PACKAGE
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.msi
      - ./*.zip
      - ./*.sha256
      - ./*.nupkg

windows-ltsc2022-x64:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-windows-amd64:ltsc2022
  when: manual
  tags:
    - windows
    - private # Shared windows runners are broke and broken

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -G "Visual Studio 17 2022" -DCMAKE_GENERATOR_PLATFORM=x64 -DPLATFORM_IDENTIFIER=win-x64
    - cmake --build . --config Release --target ALL_BUILD
    - cmake --build . --config Release --target RUN_TESTS
    - cmake --build . --config Release --target PACKAGE
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.msi
      - ./*.zip
      - ./*.sha256
      - ./*.nupkg

build-osx.12-x64:
  when: manual
  tags:
    - macos
    - private

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=osx.12-x64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.dmg
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

build-ubuntu.20.04-arm:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-amd32v7:20.04
  when: manual
  timeout: 3 hours # The arm runner machine seems to be very slow

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.20.04-arm
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

build-ubuntu.20.04-arm64:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-arm64v8:20.04
  when: manual
  timeout: 3 hours # The arm runner machine seems to be very slow

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.20.04-arm64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

build-ubuntu.20.04-x64:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-amd64:20.04
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.20.04-x64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

build-ubuntu.22.04-arm:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-arm32v7:22.04
  when: manual
  timeout: 3 hours # The arm runner machine seems to be very slow

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.22.04-arm
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

build-ubuntu.22.04-arm64:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-arm64v8:22.04
  when: manual
  timeout: 3 hours # The arm runner machine seems to be very slow

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.22.04-arm64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

build-ubuntu.22.04-x64:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-amd64:22.04
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.22.04-x64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

build-rocky.8-x64:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-rockylinux-amd64:8
  when: manual
  
  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=rocky.8-x64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.rpm
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

build-vanillapdf-nuget:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-amd64:22.04
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.22.04-x64
    - nuget pack nuget/vanillapdf.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.nupkg

build-vanillapdf-docs:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-amd64:22.04
  when: manual

  script:
    - cd doc
    - doxygen doxyfile

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./doc/api

nuget-deploy-staging:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-amd64:22.04
  stage: deploy-staging
  when: manual

  script:
    - dotnet nuget add source "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
    - dotnet nuget push "*.nupkg" --source gitlab

nuget-deploy-production:
  image: registry.gitlab.com/jurzik/vanillapdf/vanillapdf-ubuntu-amd64:22.04
  stage: deploy-production
  when: manual

  script:
    - echo "deploying to production"
    # - push sourceforge
    # - push nuget.org
    # - dotnet nuget add source "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
    # - dotnet nuget push "*.nupkg" --source gitlab
    # - FTP msi, tgz, deb, rpm, docs
