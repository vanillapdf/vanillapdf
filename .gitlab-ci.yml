stages:
  - test
  - deploy-staging

build-win-x86:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-windows-amd64:ltsc2022
  when: manual
  tags:
    - windows
    - private # Shared windows runners are broke and broken

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -G "Visual Studio 17 2022" -DCMAKE_GENERATOR_PLATFORM=Win32 -DPLATFORM_IDENTIFIER=win-x86
    - cmake --build . --config Release --target ALL_BUILD
    - cmake --build . --config Release --target RUN_TESTS
    - cmake --build . --config Release --target PACKAGE
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.msi
      - ./*.zip
      - ./*.sha256
      - ./*.nupkg

build-win-x64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-windows-amd64:ltsc2022
  when: manual
  tags:
    - windows
    - private # Shared windows runners are broke and broken

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -G "Visual Studio 17 2022" -DCMAKE_GENERATOR_PLATFORM=x64 -DPLATFORM_IDENTIFIER=win-x64
    - cmake --build . --config Release --target ALL_BUILD
    - cmake --build . --config Release --target RUN_TESTS
    - cmake --build . --config Release --target PACKAGE
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.msi
      - ./*.zip
      - ./*.sha256
      - ./*.nupkg

build-osx-x64:
  when: manual
  tags:
    - macos
    - private

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=osx-x64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.dmg
      - ./*.tar.gz
      - ./*.sha256
      - ./*.nupkg

# Ubuntu
build-ubuntu.22.04-x64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-ubuntu-amd64:22.04
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.22.04-x64
    - make
    - make test
    - make package

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256

build-ubuntu.24.04-x64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-ubuntu-amd64:24.04
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.24.04-x64
    - make
    - make test
    - make package

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256

# Enabled from 15.08.2024
build-ubuntu.24.04-arm64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-ubuntu-arm64v8:24.04
  when: manual
  timeout: 5 hours # The arm runner machine seems to be very slow

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - export VCPKG_FORCE_SYSTEM_BINARIES=1
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.24.04-arm64
    - make
    - make test
    - make package

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.deb
      - ./*.tar.gz
      - ./*.sha256

# rockylinux.8
build-rocky.8-x64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-rockylinux-amd64:8
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=rocky.8-x64
    - make
    - make test
    - make package

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.rpm
      - ./*.tar.gz
      - ./*.sha256

build-rocky.8-arm64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-rockylinux-arm64v8:8
  when: manual
  timeout: 5 hours # The arm runner machine seems to be very slow

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - export VCPKG_FORCE_SYSTEM_BINARIES=1
    - cmake . -DPLATFORM_IDENTIFIER=rocky.8-arm64
    - make
    - make test
    - make package

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.rpm
      - ./*.tar.gz
      - ./*.sha256

# rockylinux.9
build-rocky.9-x64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-rockylinux-amd64:9
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=rocky.9-x64
    - make
    - make test
    - make package

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.rpm
      - ./*.tar.gz
      - ./*.sha256

build-rocky.9-arm64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-rockylinux-arm64v8:9
  when: manual
  timeout: 5 hours # The arm runner machine seems to be very slow

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - export VCPKG_FORCE_SYSTEM_BINARIES=1
    - cmake . -DPLATFORM_IDENTIFIER=rocky.9-arm64
    - make
    - make test
    - make package

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.rpm
      - ./*.tar.gz
      - ./*.sha256

# 15.11.2023
# Since .NET 8 it is recommended to provide distro agnostic NuGet packages

# warning NETSDK1206: Found version-specific or distribution-specific runtime identifier(s):
# rocky.8-x64, ubuntu.20.04-x64, ubuntu.22.04-x64. Affected libraries: vanillapdf.runtime.rocky.8-x64, vanillapdf.runtime.ubuntu.20.04-x64, vanillapdf.runtime.ubuntu.22.04-x64.
# In .NET 8.0 and higher, assets for version-specific and distribution-specific runtime identifiers will not be found by default. See https://aka.ms/dotnet/rid-usage for details.

# 06.11.2024
# Switching linux builds for nuget to rockylinux, as it has oldest GCC out of all supported platforms.
# Compiling with newer GCC fails the load on a platform, where the glibc or glibcxx does not match.
# Switching to static linking of standard library seems even more problematic.
# Error detail: /lib64/libm.so.6: version `GLIBC_2.29' not found (required by runtimes/linux-arm64/native/libvanillapdf.so)
# Error detail: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.30' not found (required by runtimes/linux-arm64/native/libvanillapdf.so)

build-linux-x64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-rockylinux-amd64:9
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=linux-x64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.nupkg

build-linux-arm64:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-rockylinux-arm64v8:9
  when: manual
  timeout: 5 hours # The arm runner machine seems to be very slow

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - export VCPKG_FORCE_SYSTEM_BINARIES=1
    - cmake . -DPLATFORM_IDENTIFIER=linux-arm64
    - make
    - make test
    - make package
    - nuget pack nuget/vanillapdf.runtime.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.nupkg

build-vanillapdf-nuget:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-ubuntu-amd64:24.04
  when: manual

  variables:
    GIT_SUBMODULE_STRATEGY: recursive

  script:
    - cmake . -DPLATFORM_IDENTIFIER=ubuntu.22.04-x64
    - nuget pack nuget/vanillapdf.nuspec

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./*.nupkg

build-vanillapdf-docs:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-ubuntu-amd64:24.04
  when: manual

  script:
    - cd doc
    - doxygen doxyfile

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./doc/api

nuget-deploy-staging:
  image: registry.gitlab.com/vanillapdf-group/vanillapdf/vanillapdf-ubuntu-amd64:24.04
  stage: deploy-staging
  when: manual

  script:
    - dotnet nuget add source "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
    - dotnet nuget push "*.nupkg" --source gitlab
